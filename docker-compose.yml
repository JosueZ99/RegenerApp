# ===================================
# DOCKER COMPOSE - RegenerApp
# Configuración para Azure Container Instances
# ===================================

version: '3.8'

services:
  # ==========================================
  # BASE DE DATOS POSTGRESQL
  # ==========================================
  db:
    image: postgres:13-alpine
    container_name: regenerapp_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-regenerapp_db}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d/
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-regenerapp_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - regenerapp_network

  # ==========================================
  # BACKEND DJANGO API
  # ==========================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: regenerapp_backend
    restart: unless-stopped
    environment:
      # Base de datos
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-regenerapp_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      
      # Django settings
      SECRET_KEY: ${SECRET_KEY:-django-insecure-change-in-production}
      DEBUG: ${DEBUG:-False}
      USE_SQLITE: False
      
      # Configuración específica de producción
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost,http://127.0.0.1}
      
      # Datos iniciales
      LOAD_INITIAL_DATA: ${LOAD_INITIAL_DATA:-true}
    
    volumes:
      - static_files:/app/staticfiles
      - media_files:/app/media
      - ./backend/logs:/app/logs
    
    ports:
      - "8000:8000"
    
    depends_on:
      db:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/admin/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    networks:
      - regenerapp_network

  # ==========================================
  # NGINX PROXY REVERSO
  # ==========================================
  nginx:
    image: nginx:alpine
    container_name: regenerapp_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/regenerapp.conf:/etc/nginx/conf.d/default.conf
      - static_files:/app/staticfiles
      - media_files:/app/media
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
    networks:
      - regenerapp_network

# ==========================================
# VOLÚMENES PERSISTENTES
# ==========================================
volumes:
  postgres_data:
    driver: local
  static_files:
    driver: local
  media_files:
    driver: local

# ==========================================
# REDES
# ==========================================
networks:
  regenerapp_network:
    driver: bridge